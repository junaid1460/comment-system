version: '2.0'
services:
  shell:
    # docker-compose run shell bash
    image: loco-django
    stdin_open: true
    tty: true
    volumes: ['./back-end:/usr/src/app', './static:/usr/src/static']
    depends_on:
      - sql
    networks:
      loco:
        ipv4_address: 10.10.10.6
  sql:
    image: mysql
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: loco
    networks:
      loco:
        ipv4_address: 10.10.10.2
    volumes: ['./mysqldata:/var/lib/mysql']
  web-dev:
    image: loco-django
    volumes: ['./back-end:/usr/src/app']
    depends_on:
      - sql
    command: bash -c "python manage.py makemigrations && python manage.py migrate && python manage.py runserver 0:5000"
    ports: ["5000:5000"]
    networks:
      loco:
        ipv4_address: 10.10.10.3
  web:
    image: loco-django
    volumes: ['./back-end:/usr/src/app']
    depends_on:
      - sql
    command: bash -c "python manage.py makemigrations && python manage.py migrate && gunicorn backend.wsgi:application -b 0:5000 --workers 3"
    
    networks:
      loco:
        ipv4_address: 10.10.10.3
  server:
    image: nginx
    volumes: ["./front-end/build:/var/www", './nginx.conf:/etc/nginx/nginx.conf', './static:/var/www/files']
    ports: ["80:80"]
    networks:
      loco:
        ipv4_address: 10.10.10.4
    depends_on:
      - web
      - react-build
  server-dev:
    image: nginx
    volumes: ['./nginx.debug.conf:/etc/nginx/nginx.conf', './static:/var/www/files']
    network_mode: 'host'
  react-build:
    image: node:latest
    volumes: ["./front-end:/home/node/app"]
    working_dir: '/home/node/app'
    command: bash -c "npm i && npm run build"
  django-static:
    # docker-compose run shell bash
    image: loco-django
    volumes: ['.:/usr/src/app']
    command: bash -c "rm -rf static;cd back-end;python manage.py collectstatic"
networks:
  loco:
    
    ipam:
      config:
        - subnet: 10.10.10.0/10
          gateway: 10.10.10.1

  
    
    
